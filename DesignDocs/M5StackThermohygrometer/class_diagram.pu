@startuml class diagram

Main x--> TaskManager

abstract class CommunicationClient {
    + {abstract} Prepare(): void
    + {abstract} SendThermohygroData(result: MeasurementResult*): void
}

class CommunicationClientImpl {
    - settings_: AwsCommunicationSettings*
    - mqtt_client_: PubSubClient*
    - http_client_: WiFiClientSecure*

    + Prepare(): void
    + SendThermohygroData(result: MeasurementResult*): void
    - ConnectToWiFi(): bool
    - SyncronizeTime(): bool
    - SetUpMqttClient(): bool
    - ConnectToAws(): bool
}

CommunicationClient <|-- CommunicationClientImpl
CommunicationClientImpl o-- AwsCommunicationSettings
CommunicationClientImpl x--> SettingsProvider

class SettingsProvider {
    + {static} Of(): ThermohygrometerSettings*
}

SettingsProvider ..> AwsCommunicationSettings
SettingsProvider x--> SDCardController
SettingsProvider x--> JsonHandler

class AwsCommunicationSettings {
    + wifi_settings: WiFiSettings*
    + aws_settings: AWSSettings*
}

AwsCommunicationSettings *-- WiFiSettings
AwsCommunicationSettings *-- AWSSettings

class WiFiSettings {
    + ssid: string
    + password: string
}

class AWSSettings {
    + client_id: string
    + endpoint: string
    + port: string
    + root_ca: string
    + device_certificate: string
    + private_key: string
    + topic: string
}

class SDCardController {
    + {static} ReadFileFromSDCard(file_name: string): string
}

class JsonHandler {
    + {static} Serialize(json_map: map<string, string>): string
    + {static} Parse(json: string): map<string, string>
}

class ConsoleLogger {
    + {static} Log(log_data: LogData*): void
    - {static} LogInfo(class_name: string, method_name: string, info: string): void
    - {static} LogTrace(class_name: string, method_name: string, info: string): void
    - {static} LogDebug(class_name: string, method_name: string, info: string): void
    - {static} LogError(class_name: string, method_name: string, info: string): void
}

class UIManagerBase {
    + {static} GetInstance(ui_type: UIType): UIManagerBase*
    + {abstract} Initialize(): void
    + {abstract} HandleEvent(): void
}

UIManagerBase <|-- CUIManager

class CUIManager {
    + Initialize(): void
    + HandleEvent(): void
}

class GUIManager {
    - view_controller_: ViewController*

    + CheckIfButtonsPressed(): void
    + NotifyEnvDataMeasured(): void
}

enum ButtonType {
    kRightButton
    kMiddleButton
    kLeftButton
}

GUIManager -- ButtonType
GUIManager x--> GUIContext
GUIManager +-- MeasureEnvDataListenerImpl

class MeasureEnvDataListenerImpl {
    + OnMeasureEnvData(): void
}

MeasureEnvDataListener <|-- MeasureEnvDataListenerImpl

abstract class GUIContext {
    + {abstract} OnButtonPressed(type: ButtonType): void
    + {abstract} OnMeasureEnvData(): void
    + {abstract} ChangeState(type: ViewType): void
    + {abstract} ScrollUp(): void
    + {abstract} ScrollDown(): void
    + {abstract} DisplayLatestResult(): void
    + {abstract} DisplayResultList(): void
}

class ViewController {
    + OnButtonPressed(type: ButtonType): void
    + OnMeasureEnvData(): void
    + ChangeState(type: ViewType): void
    + ScrollUp(): void
    + ScrollDown(): void
    + DisplayLatestResult(): void
    + DisplayResultList(): void
}

GUIContext <|-- ViewController
ViewController x--> ViewState

abstract class ViewState {
    + {static} GetInstance(type: ViewType): ViewState*
    + {abstract} Initialize(context: GUIContext*): void
    + {abstract} Finalize(context: GUIContext*): void
    + {abstract} OnMeasureEnvData(context: GUIContext*): void
    + {abstract} DoRightButtonAction(context: GUIContext*): void
    + {abstract} DoMiddleButtonAction(context: GUIContext*): void
    + {abstract} DoLeftButtonAction(context: GUIContext*): void
}

ViewState <|-- LatestResultViewState
ViewState <|-- ResultListViewState

class LatestResultViewState {
    + Initialize(context: GUIContext*): void
    + Finalize(context: GUIContext*): void
    + OnMeasureEnvData(context: GUIContext*): void
    + DoRightButtonAction(context: GUIContext*): void
    + DoMiddleButtonAction(context: GUIContext*): void
    + DoLeftButtonAction(context: GUIContext*): void
}

LatestResultViewState x--> GUIContext

class ResultListViewState {
    + Initialize(context: GUIContext*): void
    + Finalize(context: GUIContext*): void
    + OnMeasureEnvData(context: GUIContext*): void
    + DoRightButtonAction(context: GUIContext*): void
    + DoMiddleButtonAction(context: GUIContext*): void
    + DoLeftButtonAction(context: GUIContext*): void
}

ResultListViewState x--> GUIContext

class TaskManager {
    - measure_task_handler_: TaskHandle_t

    + {static} GetInstance(): TaskManager*
    + CreateTask(task_method: string, context: void*): bool
    + DeleteTask(task_method: string): bool
}

TaskManager ..> ThermohygroDataMeasurer

class ThermohygroDataMeasurer {
    - thermohygrosensor_: SHT3X
    - measure_env_data_listener_: MeasureEnvDataListener*
    - communication_client_: CommunicationClient*
    - next_measure_mins_: int
    - next_sending_hours_: int

    + SetMeasureEnvDataListener(listener: MeasureEnvDataListener*): void
    + SetCommunicationClient(client: CommunicationClient*): void
    + ReadThermohygroData(): void
}

ThermohygroDataMeasurer x--> SHT3X
ThermohygroDataMeasurer x--> MeasurementResultManager
ThermohygroDataMeasurer +-- MeasureEnvDataListener
ThermohygroDataMeasurer x--> CommunicationClient

abstract class MeasureEnvDataListener {
    + OnMeasureEnvData(): void
}

class SHT3X {
    - address_: uint8_t
    - c_temp_: float
    - f_temp_: float
    - humidity: float

    + ReadThermohygroData(): ThermohygroData*
}

class ThermohygroData {
    + temperature: float
    + humidity: float

    + {static} CopyWith(base: ThermohygroData*): ThermohygroData*
}

MeasurementResultManager o-- MeasurementResult

class MeasurementResult {
    + time: string
    + thermohygro_data: ThermohygroData*

    + {static} CopyWith(base: MeasurementResult*): MeasurementResult*
    + ToString(): string
}

MeasurementResult *-- ThermohygroData

class MeasurementResultManager {
    - results_: list<MeasurementResult*>

    + AddMeasurementResult(result: MeasurementResult*): void
    + GetResults(): list<MeasurementResult*>
}

MeasurementResult x--> JsonHandler

@enduml